Name: [write your name here]


Sorting Efficiency Lab
www.sorting-algorithms.com

•  Click on [refresh icon] to restart the animations in a row, a column, or the entire table. 
•  Click directly on an animation image to start or restart it.

Use the website to experiment with different sorting algorithms and to answer the following questions:


0.	Ideal sorting algorithms 
What five properties do ideal sorting algorithms have?
a) Stable: Equal keys aren't reordered 	

b) Operates in place, requiring O(1) extra space

c) Worst-case O(n * log(n)) key comparisons	

d) Worst-case O(n) swaps 

e) Adaptive: Speeds up to O(n) when data is nearly sorted or when there are few unique keys



1.	Selection Sort

a)	For which of the four situations (random, nearly sorted, reversed, few unique) is Selection Sort most efficient? Explain why.
    All four situations for selection sort had the same efficiency. These four situations spent the same amount of time completing the sort. In each situation, they spend the same amount of time looping through each character making comparisons

b)	How does changing the problem size affect each of the four situations? 
   Even if we increase the problem size for all of the situations, each situation will still take the same amount of time.


c)	How does the Selection Sort algorithm work? Explain.
 
 The selection sort starts at one end with an index of 0 makes a comparison with each character to the other end of the list. After finding the desired value, it brings it to the front of the list.


d)	What do you see in the animation that helps you identify that the animation is showing Selection Sort?

  the pointer goes down the entire list, indicating that it's making comparison with each character. 

e)	How much extra space is needed for the Selection Sort algorithm? Is this efficient use of space?

    O(1) extra space is needed for the Selecton

f)	How much time does Selection Sort take? Use Big O notation.

  Selection Sort takes O(n^2) time. 

g)	What are the advantages of Selection Sort?
    A situation that is not closely sorted at all will take the same amount of time as a situation that is almost sorted. 


h)	What are the disadvantages of Selection Sort?
    Since selection sort will take up a lot of time by looping through each character, selection sort isn't the ideal sort to use    when you are in a situation with a nearly sorted list. 


2.	Insertion Sort

a)	For which of the four situations is Insertion Sort most efficient? Explain why.

   Insertion sort is the most efficient for a nearly sorted algorithm. In a nearly sorted situation, the algroithm will make fewer comparisons since it immediately checks the next index if it's higher than the current index.

b)	For which of the four situations is Insertion Sort least efficient? Explain why.

Insertion sort is the least efficient for a reversed situation because insertion sort will have to make comparisons with each previous index. In a reversed situation, the smallest numbers at the end of the list will have to keep on comparing with the bigger numbers in the beginning until finally being placed at the beginning of the list.   

c)	How does changing the problem size affect each of the four situations?

Increasing the problem size will increase the amount of time it takes to sort for all of them.

d)	How does the Insertion Sort algorithm work? Explain.
    Insertion sort takes an index and compares it with the previous index. If the value is in the right spot, it inserts in after the specified index.  


e)	What do you see in the animation that helps you identify that the animation is showing Insertion Sort?

    The pointer takes an index and compares it with all previous indexes. It is easy to see this because each time the pointer moves down an index, it is followed by a series of comparisons with previous indexes as the pointer moves upwards. 

f)	How much extra space is needed for the Insertion Sort algorithm? Is this efficient use of space?
     
     Insertion Sort requires O(1) extra space. 


g)	How much time does Insertion Sort take? Use Big O notation.

    Insertion sort takes O(n^2) extra time.

h)	What are the advantages of Insertion Sort?

    Insertion sort is stable and is idealy used for shorter problem sizes or nearly sorted data.

i)	What are the disadvantages of Insertion Sort?

  For data that is not even close to being sorted, Insertion sort can take a long time.

3.	Merge Sort

a)	For which of the four situations is Merge Sort most efficient? Explain why.

    Each of the situations are equally efficient. It takes the same amount of time to split each situation into parts, and the merging process makes the same amount of comparisons for each situation.

b)	How does changing the problem size affect each of the four situations?

changing the problem size for each of the four situations will not have an effect. 

c)	How does the Merge Sort algorithm work? Explain.

The merge sort algorithm splits repeatedly splits the data in half and does recursive sorts by merging sorted sub-arrays using temporary arrays.

d)	What do you see in the animation that helps you identify that the animation is showing Merge Sort?

    It is easy to see how the splitting take place as the pointer seems to always be trying to find the halfway point and   immeidately moving back up to the top.    

e)	How much extra space is needed for the Merge Sort algorithm (using arrays)? Is this efficient use of space?

This algorithm needs O(n) extra space. This isn't efficient because the bigger the problem size, the more space it will need to use. 

f)	How much time does Merge Sort take? Use Big O notation.

The merge sort takes up O(n * lg(n)) amount of time.

g)	What are the advantages of Merge Sort?
    
    Merge sort is very predictable. It is simple to implement and is the only stable sorting algorithm.
    
h)	What are the disadvantages of Merge Sort?

    Merge sort is expensive and complex.

4.	Sorting Algorithm Comparisons

a)	For the random situations, which of the three algorithms (selection, insertion, or merge sort) is the fastest? Why? 

    Overall, merge sort seems to be the fastest because splitting data first, followed by sorting takes up a shorter amount     of time than having to make a whole ton of comparisons with the rest of the data.   

b)	For the random situations, is selection sort slower or is insertion sort slower? Is it significantly slower or only a few lines slower?

    selection sort is significantly slower.

c)	For the nearly sorted situations, which of the three algorithms is the fastest? Why? 

    Insertion sort is the fastest because of the fact that it barely has to make any comparison's at all since the list is mostly sorted. The algorithm would make few comparisons before moving on to the next index. 

d)	For the nearly sorted situations, how does selection sort do compared with the other sorting algorithms? 

    Selection sort is a turtle.

e)	For the reversed situations, is selection sort slower or is insertion sort slower? Is it significantly slower or only a few lines slower?

    Selection sort is always slower. It is a fricken turtle. It is significantly slower.

f)	Does having only a few unique keys speed up any of the three algorithms? Is so, how much faster is it?

    Having a few unique keys doesn't speed up any of the three algorithms by a whole lot. In fact, selection and merge sort still  take the same amount of time. 

g)	In what case(s) would you use Selection Sort over the other two sorting algorithms?

    Selection sort should never be used.

h)	In what case(s) would you use Insertion Sort over the other two sorting algorithms?

You would use insertion sort when data is already nearly sorted or for smaller problem sizes 

i)	In what case(s) would you use Merge Sort over the other two sorting algorithms?

We would use merge sort if space isn't a problem for us.

Challenge Questions:

Bubble Sort
a)	For which of the four situations is Bubble Sort most efficient? Explain why.



b)	How does changing the problem size affect each of the four situations?



c)	How does the Bubble Sort algorithm work? Explain.



d)	What do you see in the animation that helps you identify that the animation is showing Bubble Sort?



e)	How much extra space is needed for the Bubble Sort algorithm (using arrays)? Is this efficient use of space?



f)	How much time does Bubble Sort take? Use Big O notation.



g)	What are the advantages of Bubble Sort?



h)	What are the disadvantages of Bubble Sort?




Quick Sort
a)	For which of the four situations is Quick Sort most efficient? Explain why.



b)	How does changing the problem size affect each of the four situations?



c)	How does the Quick Sort algorithm work? Explain.



d)	What do you see in the animation that helps you identify that the animation is showing Quick Sort?



e)	How much extra space is needed for the Quick Sort algorithm (using arrays)? Is this efficient use of space?



f)	How much time does Quick Sort take? Use Big O notation.



g)	What are the advantages of Quick Sort?



h)	What are the disadvantages of Quick Sort?

